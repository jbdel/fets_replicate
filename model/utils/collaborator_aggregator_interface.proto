// Copyright (C) 2020 Intel Corporation
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = 'proto3';

package openfl_proto;

// we start with everything as "required" while developing / debugging. This forces correctness better.
// FIXME: move to "optional" once development is complete

service Aggregator {
    rpc RequestJob(JobRequest) returns (JobReply) {}
    rpc DownloadTensor(TensorDownloadRequest) returns (stream DataStream) {}
    rpc UploadResults(stream DataStream) returns (ResultsAck) {}
    rpc DownloadRoundSummary(RoundSummaryDownloadRequest) returns (RoundSummary) {}
}

// handles large size data
message DataStream {
	uint32 size = 1; // size, in bytes, of the data sent in npbytes
	bytes npbytes = 2; // actual data
}

enum Job {
    JOB_DOWNLOAD_MODEL = 0;
    JOB_UPLOAD_RESULTS = 1;
    JOB_SLEEP = 2;
    JOB_QUIT = 3;
}

message TensorProto {
    string name = 1;
    bytes data_bytes = 2;
    repeated int32 shape = 3;
}

message ModelHeader {
    string id = 1;
    int32 version = 2;
}

// Everything but 'sender' is effectively just for sanity checking during testing
message MessageHeader {
    string sender = 1;
    string recipient = 2;
    string federation_id = 3;
    ModelHeader model_header = 4;
    // FIXME: really a nonce
    int32 counter = 5; // FIXME: better sanity check device?
    string single_col_cert_common_name = 6;
}

message ExtraModelInfo {
    repeated string tensor_names = 1;
}

message ValueDictionary {
    map<string, float> dictionary = 1;
}

message FloatList {
        repeated float value = 1;
        }

message ListValueDictionary {
    map<string, FloatList> list_dictionary = 1;
    }

// COLLABORATOR MESSAGES
message TensorDownloadRequest {
    MessageHeader header = 1;
    string tensor_name = 2;
}

message ResultsUpload {
    MessageHeader header = 1;
    int32 weight = 2;
    string task = 3;
    oneof extra {
        TensorProto tensor = 4;
        float value = 5;
        ValueDictionary value_dict = 6;
        ListValueDictionary list_value_dict = 7;
    }
}

message JobRequest {
    MessageHeader header = 1;
}

message RoundSummaryDownloadRequest {
    MessageHeader header = 1;
}

// AGGREGATOR MESSAGES

message RoundSummary {
    MessageHeader header = 1;
    string summary = 2;
}

message GlobalTensor {
    MessageHeader header = 1;
    TensorProto tensor = 2;
}

message JobReply {
    MessageHeader header = 1;
    Job job = 2;
    oneof extra {
        ExtraModelInfo extra_model_info = 3;
        string name = 4;
        int32 seconds = 5;
    }
}

message ResultsAck {
    MessageHeader header = 1;
    bool discard_round = 2;
}

/// LEGACY PBUF DEFINITIONS TO USE WITH CONVERSION UTILTIES

message LegacyTensorProto {
    string name = 1;
    bytes data_bytes = 3;
    repeated LegacyMetadataProto transformer_metadata = 4;
}

message LegacyModelHeader {
    string id = 1;
    bool is_delta = 2;
    int32 delta_from_version = 3;
    // FIXME: is this version or rounds trained? We need to know rounds trained somewhere, and this currently does track that
    int32 version = 4;
}

message LegacyModelProto {
    LegacyModelHeader header = 1;
    repeated LegacyTensorProto tensors = 2;
}

message LegacyMetadataProto {
    map<int32, float> int_to_float = 1;
    repeated int32 int_list = 2;
    repeated bool bool_list = 3;
}